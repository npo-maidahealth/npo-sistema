// services/atualizadorStatus.js
import prisma from '../db/prisma.js';
import { fetchGuiaDetalhes } from './ecoService.js';

export async function atualizarStatusGuias() {
    try {
        console.log('üîÑ Iniciando atualiza√ß√£o de status das guias...');
        
        // BUSCA MUITO SIMPLES - apenas guias n√£o reguladas
        const guiasParaAtualizar = await prisma.prioridade.findMany({
            where: {
                regulada: false
            },
            select: {
                id: true,
                numeroGuia: true,
                idGuiaECO: true,
                status: true, // ‚Üê EST√Å FALTANDO NO SEU C√ìDIGO ATUAL!
                fonte: true,
                regulada: true
            }
        });

        console.log(`üìä ${guiasParaAtualizar.length} guias para verificar status`);

        let guiasAtualizadas = 0;

        for (const guia of guiasParaAtualizar) {
            try {
                console.log(`üîç Verificando guia ${guia.numeroGuia} (ID: ${guia.id})`);
                
                const detalhesGuia = await fetchGuiaDetalhes(guia.numeroGuia);
                
                if (!detalhesGuia) {
                    console.log(`‚ùå Guia ${guia.numeroGuia} n√£o encontrada no ECO`);
                    continue;
                }

                // Pegar statusRegulacao da API
                const statusDaAPI = detalhesGuia.statusRegulacao || detalhesGuia.situacao || detalhesGuia.status;
                
                if (!statusDaAPI) {
                    console.log(`‚ö†Ô∏è Situa√ß√£o n√£o dispon√≠vel para guia ${guia.numeroGuia}`);
                    continue;
                }

                // Verificar se o status mudou
                if (guia.status !== statusDaAPI) {
                console.log(`üîÑ Atualizando guia ${guia.numeroGuia}: ${guia.status} ‚Üí ${statusDaAPI}`);
                
                // Determinar se deve marcar como regulada
                const statusUpper = statusDaAPI.toUpperCase();
                const deveMarcarRegulada = statusUpper.includes('AUTORIZAD') || 
                                        statusUpper.includes('APROVAD') ||
                                        statusUpper.includes('SEM RESTRI√á√ÉO') ||
                                        statusUpper.includes('NEGAD') ||
                                        statusUpper.includes('CANCELAD') ||
                                        statusUpper.includes('EXECUTAD') ||
                                        statusUpper.includes('EXECUTADA') ||
                                        statusUpper.includes('CONCLUID');
                
                await prisma.prioridade.update({
                    where: { id: guia.id },
                    data: { 
                        status: statusDaAPI,
                        regulada: deveMarcarRegulada,
                        // Se for marcar como regulada, adiciona data de regulacao
                        ...(deveMarcarRegulada && {
                            dataRegulacao: new Date(),
                            reguladorId: 1 // Ou o ID do usu√°rio/system que est√° fazendo a atualiza√ß√£o
                        })
                    }
                });
                    
                    guiasAtualizadas++;
                    console.log(`‚úÖ Guia ${guia.numeroGuia} atualizada para: ${statusDaAPI}`);
                    
                } else {
                    console.log(`‚úÖ Status da guia ${guia.numeroGuia} j√° est√° atualizado: ${statusDaAPI}`);
                }
                
            } catch (error) {
                console.error(`‚ùå Erro ao processar guia ${guia.numeroGuia}:`, error.message);
                continue;
            }
        }

        console.log(`‚úÖ Atualiza√ß√£o conclu√≠da: ${guiasAtualizadas} guias atualizadas`);
        return guiasAtualizadas;
        
    } catch (error) {
        console.error('‚ùå Erro geral na atualiza√ß√£o de status:', error);
        throw error;
    }
}

export async function forcarAtualizacao() {
    return await atualizarStatusGuias();
}