generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                      Int                 @id @default(autoincrement())
  nome                    String
  email                   String              @unique
  senha_hash              String?
  whatsapp                String?
  regional                String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @default(now()) @updatedAt
  status                  UserStatus          @default(PENDENTE)
  aprovado                Boolean             @default(false)
  cargos                  CargosDoUsuario[]
  prioridadesSolicitadas  Prioridade[]        @relation("PrioridadeSolicitada")
  produtos                ProdutosDoUsuario[]
  protocolos_responsaveis Protocolo[]         @relation("Responsavel")
  protocolos_solicitados  Protocolo[]         @relation("Solicitante")
  tratativas              Tratativa[]
}

model Cargo {
  id        Int               @id @default(autoincrement())
  nome      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  usuarios  CargosDoUsuario[]
}

model CargosDoUsuario {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  cargoId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  cargo     Cargo    @relation(fields: [cargoId], references: [id])
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  @@unique([usuarioId, cargoId])
}

model Protocolo {
  id                    Int         @id @default(autoincrement())
  protocolo_uid         String      @unique
  descricao             String
  tipo_automacao        String
  status                String
  nivel_dificuldade     Int?
  ferramentas_indicadas String?
  data_criacao          DateTime    @default(now())
  data_fechamento       DateTime?
  id_solicitante        Int
  id_responsavel        Int?
  descricao_resolucao   String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now()) @updatedAt
  responsavel           Usuario?    @relation("Responsavel", fields: [id_responsavel], references: [id])
  solicitante           Usuario     @relation("Solicitante", fields: [id_solicitante], references: [id])
  tratativas            Tratativa[]
}

model Tratativa {
  id            Int       @id @default(autoincrement())
  id_protocolo  Int
  id_usuario    Int
  descricao     String
  data_criacao  DateTime  @default(now())
  tipo_mensagem String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  protocolo     Protocolo @relation(fields: [id_protocolo], references: [id])
  usuario       Usuario   @relation(fields: [id_usuario], references: [id])
}

model Produto {
  id          Int                 @id @default(autoincrement())
  nome        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt
  prioridades Prioridade[]
  usuarios    ProdutosDoUsuario[]
}

model ProdutosDoUsuario {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  produtoId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  produto   Produto  @relation(fields: [produtoId], references: [id])
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  @@unique([usuarioId, produtoId])
}

model Prioridade {
  id                     Int                     @id @default(autoincrement())
  numeroGuia             String
  tipoGuia               String
  status                 String
  caracterAtendimento    String?
  observacao             String?
  produtoId              Int
  usuarioId              Int
  reguladorId            Int?
  idGuiaECO              Int?
  dataCriacao            DateTime                @default(now())
  dataAtualizacao        DateTime?               @updatedAt
  capturada              Boolean                 @default(false)
  vencimento             DateTime?
  autorizada             Boolean                 @default(false)
  regulada               Boolean                 @default(false)
  area                   String?
  atrasada               Boolean?
  atrasoRegulacao        String?
  beneficiario           String?
  beneficiarioNomeSocial String?
  cartaoBeneficiario     String?
  cpfBeneficiario        String?
  dataHoraSolicitacao    DateTime?
  dataPausaSla           DateTime?
  dataRegulacao          DateTime?
  dataSolicitacao        DateTime?
  dataVencimentoSla      DateTime?
  fila                   String?
  fonte                  String?                 @default("ECO")
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt
  vezesSolicitado        Int?                    @default(1)
  produto                Produto                 @relation(fields: [produtoId], references: [id])
  regulador              Regulador?              @relation("PrioridadeRegulador", fields: [reguladorId], references: [id])
  usuario                Usuario                 @relation("PrioridadeSolicitada", fields: [usuarioId], references: [id])
  solicitacoes           SolicitacaoPrioridade[]
}

model SolicitacaoPrioridade {
  id                    Int      @id @default(autoincrement())
  prioridadeId          Int
  protocoloSPG          String   @unique
  dataHoraSolicitacao   DateTime @default(now())
  observacaoSolicitacao String?
  reguladorPlantaoId    Int?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  prioridade       Prioridade @relation(fields: [prioridadeId], references: [id])
  reguladorPlantao Regulador? @relation("SolicitacaoPrioridadeToReguladorPlantao", fields: [reguladorPlantaoId], references: [id])
}

model Regulador {
  id                  Int                     @id @default(autoincrement())
  nome                String                  @unique
  ativo               Boolean                 @default(true)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @default(now()) @updatedAt
  Escala              Escala[]
  prioridades         Prioridade[]            @relation("PrioridadeRegulador")
  solicitacoesPlantao SolicitacaoPrioridade[] @relation("SolicitacaoPrioridadeToReguladorPlantao")
}

model user_sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)
}

model Escala {
  id          Int       @id @default(autoincrement())
  reguladorId Int
  diaSemana   Int
  turno       String
  horaInicio  String
  horaFim     String
  filas       String
  observacao  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  Regulador   Regulador @relation(fields: [reguladorId], references: [id])

  @@unique([reguladorId, diaSemana, turno])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum UserStatus {
  PENDENTE
  ATIVO
  INATIVO
}